/* Table hôtels */
CREATE OR REPLACE TABLE HOTELS (
ID INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
NAME VARCHAR(30) NOT NULL,
STREET VARCHAR(50) NOT NULL,
CITY VARCHAR(30) NOT NULL,
STAR_RATING INTEGER UNSIGNED NOT NULL,
CHECK (STAR_RATING > 0 AND STAR_RATING <= 5),
PRIMARY KEY (ID));

/* Table clients */
CREATE OR REPLACE TABLE CLIENTS (
ID INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
FIRSTNAME VARCHAR(30) NOT NULL,
LASTNAME VARCHAR(30) NOT NULL,
STREET VARCHAR(30) NOT NULL,
CITY VARCHAR(30) NOT NULL,
MAIL VARCHAR(30) NOT NULL UNIQUE,
PASSWORD VARCHAR(200) NOT NULL,
IS_REGULAR BOOLEAN DEFAULT 0 NOT NULL,
PRIMARY KEY (ID));

/* Table types de chambre */
CREATE OR REPLACE TABLE ROOMTYPES (
ID INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
NAME VARCHAR(30) NOT NULL,
PRICE DECIMAL(6,2) UNSIGNED NOT NULL,
BED_CAPACITY INTEGER UNSIGNED NOT NULL,
HAS_PHONE BOOLEAN NOT NULL,
HAS_TV BOOLEAN NOT NULL,
CHECK (PRICE > 0),
PRIMARY KEY (ID));

/* Table chambres */
CREATE OR REPLACE TABLE ROOMS (
ID INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
HOTEL_ID INTEGER UNSIGNED,
ROOMTYPE_ID INTEGER UNSIGNED NOT NULL,
PRIMARY KEY (ID),
FOREIGN KEY (HOTEL_ID) REFERENCES HOTELS(ID),
FOREIGN KEY (ROOMTYPE_ID) REFERENCES ROOMTYPES(ID));

/* Table réservations */
CREATE OR REPLACE TABLE RESERVATIONS (
ID INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
CLIENT_ID INTEGER UNSIGNED,
HOTEL_ID INTEGER UNSIGNED,
ROOMTYPE_ID INTEGER UNSIGNED,
ARRIVAL_DATE TIMESTAMP(0) DEFAULT 0 NOT NULL,
EXIT_DATE TIMESTAMP(0) DEFAULT 0 NOT NULL,
DURATION INTEGER UNSIGNED NOT NULL,
CHECK (DURATION > 0),
ROOM_COUNT INTEGER UNSIGNED NOT NULL,
CHECK (ROOM_COUNT > 0),
PEOPLE_COUNT INTEGER UNSIGNED NOT NULL,
CHECK (PEOPLE_COUNT > 0),
IS_PAYED BOOLEAN DEFAULT 0 NOT NULL,
IS_COMFIRMED BOOLEAN DEFAULT 0 NOT NULL,
IS_CANCELLED BOOLEAN DEFAULT 0 NOT NULL,
IS_ARCHIVED BOOLEAN DEFAULT 0 NOT NULL,
PRIMARY KEY (ID),
FOREIGN KEY (CLIENT_ID) REFERENCES CLIENTS(ID),
FOREIGN KEY (HOTEL_ID) REFERENCES HOTELS(ID),
FOREIGN KEY (ROOMTYPE_ID) REFERENCES ROOMTYPES(ID));

/* Table occupations */
CREATE OR REPLACE TABLE OCCUPATIONS (
ID INTEGER UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE,
RESERVATION_ID INTEGER UNSIGNED,
ROOM_ID INTEGER UNSIGNED,
IS_CLIENT_PRESENT BOOLEAN DEFAULT 0 NOT NULL,
IS_ARCHIVED BOOLEAN DEFAULT 0 NOT NULL,
PRIMARY KEY (RESERVATION_ID, ROOM_ID),
FOREIGN KEY (RESERVATION_ID) REFERENCES RESERVATIONS(ID),
FOREIGN KEY (ROOM_ID) REFERENCES ROOMS(ID));

/* Table occupants */
CREATE OR REPLACE TABLE OCCUPANTS (
ID INTEGER UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE,
OCCUPATION_ID INTEGER UNSIGNED,
FIRSTNAME VARCHAR(30) NOT NULL,
LASTNAME VARCHAR(30) NOT NULL,
PRIMARY KEY (OCCUPATION_ID, FIRSTNAME, LASTNAME),
FOREIGN KEY (OCCUPATION_ID) REFERENCES OCCUPATIONS(ID));

/* Table services */
CREATE OR REPLACE TABLE SERVICES (
ID INTEGER UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE,
HOTEL_ID INTEGER UNSIGNED,
NAME VARCHAR(30) NOT NULL UNIQUE,
PRICE DECIMAL(6,2) UNSIGNED NOT NULL,
UNIQUE_ORDER BOOLEAN NOT NULL,
PRIMARY KEY (HOTEL_ID, NAME),
FOREIGN KEY (HOTEL_ID) REFERENCES HOTELS(ID));

/* Table factures */
CREATE OR REPLACE TABLE BILLS (
ID INTEGER UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE,
RESERVATION_ID INTEGER UNSIGNED NOT NULL,
CLIENT_ID INTEGER UNSIGNED NOT NULL,
AMOUNT DECIMAL(8,2) NOT NULL,
IS_PAYED BOOLEAN DEFAULT 0 NOT NULL,
IS_ARCHIVED BOOLEAN DEFAULT 0 NOT NULL,
PRIMARY KEY (RESERVATION_ID,CLIENT_ID),
FOREIGN KEY (RESERVATION_ID) REFERENCES RESERVATIONS(ID),
FOREIGN KEY (CLIENT_ID) REFERENCES CLIENTS(ID));

/* Table des services facturés */
CREATE OR REPLACE TABLE BILLEDSERVICES (
ID INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
OCCUPATION_ID INTEGER UNSIGNED NOT NULL,
SERVICE_ID INTEGER UNSIGNED NOT NULL,
IS_ARCHIVED BOOLEAN DEFAULT 0 NOT NULL,
PRIMARY KEY (ID),
FOREIGN KEY (OCCUPATION_ID) REFERENCES OCCUPATIONS(ID),
FOREIGN KEY (SERVICE_ID) REFERENCES SERVICES(ID));

/* INSERTION DES TYPES DE CHAMBRE PAR DÉFAUT */
INSERT INTO ROOMTYPES(ID,NAME,PRICE,BED_CAPACITY,HAS_PHONE,HAS_TV) VALUES (1,'STANDARD','49.99',1,0,0);
INSERT INTO ROOMTYPES(ID,NAME,PRICE,BED_CAPACITY,HAS_PHONE,HAS_TV) VALUES (2,'TOURISM','79.99',1,0,1);
INSERT INTO ROOMTYPES(ID,NAME,PRICE,BED_CAPACITY,HAS_PHONE,HAS_TV) VALUES (3,'COMFORT','119.99',2,0,1);
INSERT INTO ROOMTYPES(ID,NAME,PRICE,BED_CAPACITY,HAS_PHONE,HAS_TV) VALUES (4,'LUXURY','299.99',3,1,1);

/* INSERTION DES HOTELS DISPONIBLES */
INSERT INTO HOTELS(ID,NAME,STREET,CITY,STAR_RATING) VALUES (1,"IBIS BUSINESS","45 avenue du Four","Marseille",3);
INSERT INTO HOTELS(ID,NAME,STREET,CITY,STAR_RATING) VALUES (2,"IBIS CLASSIC","3 rue Mauvais","Paris",4);
INSERT INTO HOTELS(ID,NAME,STREET,CITY,STAR_RATING) VALUES (3,"IBIS LUXE","12 avenue de la Fleur","Nice",5);

/* INSERTION DES CHAMBRES DISPONIBLES */
INSERT INTO ROOMS(HOTEL_ID,ROOMTYPE_ID) VALUES (1,1);
INSERT INTO ROOMS(HOTEL_ID,ROOMTYPE_ID) VALUES (1,1);
INSERT INTO ROOMS(HOTEL_ID,ROOMTYPE_ID) VALUES (1,2);

INSERT INTO ROOMS(HOTEL_ID,ROOMTYPE_ID) VALUES (2,2);
INSERT INTO ROOMS(HOTEL_ID,ROOMTYPE_ID) VALUES (2,2);
INSERT INTO ROOMS(HOTEL_ID,ROOMTYPE_ID) VALUES (2,3);

INSERT INTO ROOMS(HOTEL_ID,ROOMTYPE_ID) VALUES (3,4);
INSERT INTO ROOMS(HOTEL_ID,ROOMTYPE_ID) VALUES (3,4);
INSERT INTO ROOMS(HOTEL_ID,ROOMTYPE_ID) VALUES (3,4);

/* INSERTION DES SERVICES DE CHAQUE HOTEL */
INSERT INTO SERVICES(HOTEL_ID,NAME,PRICE,UNIQUE_ORDER) VALUES (1,"Télévision","19.99",1);

INSERT INTO SERVICES(HOTEL_ID,NAME,PRICE,UNIQUE_ORDER) VALUES (2,"Téléphone fixe","19.99",1);
INSERT INTO SERVICES(HOTEL_ID,NAME,PRICE,UNIQUE_ORDER) VALUES (2,"Petit déjeuner","9.99",0);

INSERT INTO SERVICES(HOTEL_ID,NAME,PRICE,UNIQUE_ORDER) VALUES (3,"Petit déjeuner volonté","29.99",0);
INSERT INTO SERVICES(HOTEL_ID,NAME,PRICE,UNIQUE_ORDER) VALUES (3,"Cocktails à volonté","59.99",1);

/* INSERTION DES CLIENTS */
INSERT INTO CLIENTS(FIRSTNAME,LASTNAME,STREET,CITY,MAIL,PASSWORD,IS_REGULAR) VALUES ("HERCULE","Bertrand","34 rue Mangeons","Toulouse","hercule-b@gmail.com","herculeb",0);
INSERT INTO CLIENTS(FIRSTNAME,LASTNAME,STREET,CITY,MAIL,PASSWORD,IS_REGULAR) VALUES ("MONTROI","Paul","3 avenue des Voitures","Grenoble","montroi-p@gmail.com","montroip",0);
INSERT INTO CLIENTS(FIRSTNAME,LASTNAME,STREET,CITY,MAIL,PASSWORD,IS_REGULAR) VALUES ("RONPUI","Henri","89 rue du Pigeon","Lille","ronpui-h@gmail.com","ronpuih",1);

/* Trigger qui gère les actions à effectuer après l'archivage d'une réservation */
DELIMITER $$
CREATE OR REPLACE TRIGGER ON_UPDATE_RESERVATION
BEFORE UPDATE ON RESERVATIONS
FOR EACH ROW
BEGIN
IF (NEW.IS_CANCELLED) THEN
	SET NEW.IS_ARCHIVED = 1;
END IF;
IF (NEW.IS_ARCHIVED) THEN
	UPDATE OCCUPATIONS SET IS_ARCHIVED = 1, IS_CLIENT_PRESENT = 0 WHERE RESERVATION_ID = NEW.ID;
END IF;
END;
$$

/* Trigger qui gère les actions à effectuer après l'archivage d'une occupation */
DELIMITER $$
CREATE OR REPLACE TRIGGER ON_ARCHIVE_OCCUPATION
AFTER UPDATE ON OCCUPATIONS
FOR EACH ROW
BEGIN
IF (NEW.IS_ARCHIVED) THEN
	DELETE FROM OCCUPANTS WHERE OCCUPATION_ID = NEW.ID;
	UPDATE BILLEDSERVICES SET IS_ARCHIVED = 1 WHERE OCCUPATION_ID = NEW.ID;
END IF;
END;
$$

/* Trigger pour vérifier si le client n'a pas déjà réservé un séjour dont les dates se chevauchent */
DELIMITER $$
CREATE OR REPLACE TRIGGER CHECK_RESERVATIONS_DATES
BEFORE INSERT ON RESERVATIONS
FOR EACH ROW
BEGIN
DECLARE N INTEGER;
SELECT 1 INTO N FROM RESERVATIONS
WHERE CLIENT_ID = NEW.CLIENT_ID AND (NOT IS_ARCHIVED OR NOT IS_CANCELLED)
AND NOT(DATEDIFF(NEW.EXIT_DATE, ARRIVAL_DATE) <= 0 OR DATEDIFF(NEW.ARRIVAL_DATE, EXIT_DATE) >= 0);
IF (N > 0) THEN SIGNAL SQLSTATE '20000' SET MESSAGE_TEXT = 'OVERLAPPING';
END IF;
END;
$$

/* Trigger qui crée une facture lors de l'ajout d'une nouvelle réservation */
DELIMITER $$
CREATE OR REPLACE TRIGGER NEW_RESERVATION
AFTER INSERT ON RESERVATIONS
FOR EACH ROW
BEGIN
	INSERT INTO BILLS(RESERVATION_ID,CLIENT_ID,AMOUNT,IS_PAYED,IS_ARCHIVED) VALUES (NEW.ID,NEW.CLIENT_ID,0.0,0,0);
END;
$$

/* Trigger pour vérifier qu'il reste bien des chambres disponibles avant de réserver */
DELIMITER $$
CREATE OR REPLACE TRIGGER CHECK_ROOM_AVAILABILITY
BEFORE INSERT ON RESERVATIONS
FOR EACH ROW
BEGIN
DECLARE N INTEGER;
SELECT COUNT(*) INTO N FROM ROOMS RO
  WHERE RO.HOTEL_ID=NEW.HOTEL_ID AND RO.ROOMTYPE_ID=NEW.ROOMTYPE_ID
  AND RO.ID NOT IN (
    SELECT DISTINCT OC.ROOM_ID FROM RESERVATIONS RE
    LEFT JOIN OCCUPATIONS OC ON RE.ID = OC.RESERVATION_ID
    WHERE (NOT RE.IS_ARCHIVED OR NOT RE.IS_CANCELLED) 
    AND DATE(arrival_date) >= RE.ARRIVAL_DATE AND DATE(exit_date) <= RE.EXIT_DATE);
IF (N < NEW.ROOM_COUNT) THEN SIGNAL SQLSTATE '20000' SET MESSAGE_TEXT = 'NO_ROOM_AVAILABLE';
END IF;
END;
$$

/** Calculer le montant total d'une réservation **/
DELIMITER $$
CREATE OR REPLACE PROCEDURE getTotalAmount(reservation_id INTEGER)
BEGIN
  DECLARE group_discount INTEGER DEFAULT getGroupDiscount();
  DECLARE regular_client_discount INTEGER DEFAULT getRegularClientDiscount();
  DECLARE total_discount INTEGER DEFAULT 0;
  DECLARE client_id INTEGER;
  DECLARE is_regular_client BOOLEAN;
  DECLARE people_count INTEGER;
  DECLARE total DOUBLE DEFAULT 0;
  SELECT ROUND((RT.PRICE*RE.DURATION*RE.ROOM_COUNT)+COALESCE(SUM(SE.PRICE),0),2), RE.PEOPLE_COUNT, RE.CLIENT_ID INTO total, people_count, client_id
  FROM RESERVATIONS RE
  JOIN ROOMTYPES RT    ON RE.ROOMTYPE_ID = RT.ID
  JOIN OCCUPATIONS OC  ON OC.RESERVATION_ID = RE.ID
  JOIN BILLEDSERVICES BS ON BS.OCCUPATION_ID = OC.ID
  JOIN SERVICES SE     ON BS.SERVICE_ID = SE.ID
  WHERE RE.ID = reservation_id;
  SELECT IS_REGULAR INTO is_regular_client FROM CLIENTS WHERE ID = client_id;
  IF (is_regular_client = 1) THEN
    SET total_discount = regular_client_discount;
  END IF;
  IF (people_count >= 3) THEN
    SET total_discount = total_discount + group_discount;
  END IF;
  SET total = ROUND(total-((total*total_discount)/100),2);
  SELECT total;
END;
$$

/* Procédure permettant d'avoir les chambres disponibles dans une certaine ville, pour des dates données */
DELIMITER $$
CREATE OR REPLACE PROCEDURE getAvailableRoomsByCity(city VARCHAR(30), arrival_date VARCHAR(10), exit_date VARCHAR(10))
BEGIN
  SELECT RO.ID FROM ROOMS RO
  LEFT JOIN HOTELS HO ON HO.ID = RO.HOTEL_ID
  WHERE HO.CITY LIKE CONCAT("%",city,"%")
  AND RO.ID NOT IN (
    SELECT DISTINCT OC.ROOM_ID FROM RESERVATIONS RE
    LEFT JOIN OCCUPATIONS OC ON RE.ID = OC.RESERVATION_ID
    WHERE (NOT RE.IS_ARCHIVED OR NOT RE.IS_CANCELLED)
    AND DATE(arrival_date) >= RE.ARRIVAL_DATE AND DATE(exit_date) <= RE.EXIT_DATE);
END;
$$

/* Procédure permettant d'avoir les chambres disponibles pour des dates données */
DELIMITER $$
CREATE OR REPLACE PROCEDURE getAvailableRooms(arrival_date VARCHAR(10), exit_date VARCHAR(10))
BEGIN  
  SELECT ID FROM ROOMS
  WHERE ID NOT IN (
    SELECT DISTINCT OC.ROOM_ID FROM RESERVATIONS RE
    LEFT JOIN OCCUPATIONS OC ON RE.ID = OC.RESERVATION_ID
    WHERE (NOT RE.IS_ARCHIVED OR NOT RE.IS_CANCELLED)
    AND DATE(arrival_date) >= RE.ARRIVAL_DATE AND DATE(exit_date) <= RE.EXIT_DATE);
END;
$$

/* Procédure permettant d'avoir les chambres disponibles pour un hotel donné, une sélection de jours et un type de chambre */
DELIMITER $$
CREATE OR REPLACE PROCEDURE checkRoomAvailablility(hotel_id INTEGER, arrival_date VARCHAR(10), exit_date VARCHAR(10), room_type_id INTEGER)
BEGIN
  SELECT RO.ID FROM ROOMS RO
  WHERE RO.HOTEL_ID=hotel_id AND RO.ROOMTYPE_ID=room_type_id
  AND RO.ID NOT IN (
    SELECT DISTINCT OC.ROOM_ID FROM RESERVATIONS RE
    LEFT JOIN OCCUPATIONS OC ON RE.ID = OC.RESERVATION_ID
    WHERE (NOT RE.IS_ARCHIVED OR NOT RE.IS_CANCELLED)
    AND DATE(arrival_date) >= RE.ARRIVAL_DATE AND DATE(exit_date) <= RE.EXIT_DATE);
END;
$$

/* Fonction permettant d'avoir la promotion pour les clients réguliers */
DELIMITER $$
CREATE OR REPLACE FUNCTION getRegularClientDiscount()
RETURNS INTEGER(2)
RETURN 20;
$$

/* Fonction permettant d'avoir la promotion de groupes */
DELIMITER $$
CREATE OR REPLACE FUNCTION getGroupDiscount()
RETURNS INTEGER(2)
RETURN 10;
$$
