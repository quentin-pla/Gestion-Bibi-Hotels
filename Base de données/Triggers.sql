/* Trigger qui gère les actions à effectuer après l'archivage d'une réservation */
DELIMITER $$
CREATE OR REPLACE TRIGGER ON_UPDATE_RESERVATION
BEFORE UPDATE ON RESERVATIONS
FOR EACH ROW
BEGIN
IF (NEW.IS_CANCELLED) THEN
	SET NEW.IS_ARCHIVED = 1;
END IF;
IF (NEW.IS_ARCHIVED) THEN
	UPDATE OCCUPATIONS SET IS_ARCHIVED = 1, IS_CLIENT_PRESENT = 0 WHERE RESERVATION_ID = NEW.ID;
END IF;
END;
$$

/* Trigger qui gère les actions à effectuer après l'archivage d'une occupation */
DELIMITER $$
CREATE OR REPLACE TRIGGER ON_ARCHIVE_OCCUPATION
AFTER UPDATE ON OCCUPATIONS
FOR EACH ROW
BEGIN
IF (NEW.IS_ARCHIVED) THEN
	DELETE FROM OCCUPANTS WHERE OCCUPATION_ID = NEW.ID;
	UPDATE BILLEDSERVICES SET IS_ARCHIVED = 1 WHERE OCCUPATION_ID = NEW.ID;
END IF;
END;
$$

/* Trigger pour vérifier si le client n'a pas déjà réservé un séjour dont les dates se chevauchent */
DELIMITER $$
CREATE OR REPLACE TRIGGER CHECK_RESERVATIONS_DATES
BEFORE INSERT ON RESERVATIONS
FOR EACH ROW
BEGIN
DECLARE N INTEGER;
SELECT 1 INTO N FROM RESERVATIONS
WHERE CLIENT_ID = NEW.CLIENT_ID AND (NOT IS_ARCHIVED OR NOT IS_CANCELLED)
AND NOT(DATEDIFF(NEW.EXIT_DATE, ARRIVAL_DATE) <= 0 OR DATEDIFF(NEW.ARRIVAL_DATE, EXIT_DATE) >= 0);
IF (N > 0) THEN SIGNAL SQLSTATE '20000' SET MESSAGE_TEXT = 'OVERLAPPING';
END IF;
END;
$$

/* Trigger qui crée une facture lors de l'ajout d'une nouvelle réservation */
DELIMITER $$
CREATE OR REPLACE TRIGGER NEW_RESERVATION
AFTER INSERT ON RESERVATIONS
FOR EACH ROW
BEGIN
	INSERT INTO BILLS(RESERVATION_ID,CLIENT_ID,AMOUNT,IS_PAYED,IS_ARCHIVED) VALUES (NEW.ID,NEW.CLIENT_ID,0.0,0,0);
END;
$$

/* Trigger pour vérifier qu'il reste bien des chambres disponibles avant de réserver */
DELIMITER $$
CREATE OR REPLACE TRIGGER CHECK_ROOM_AVAILABILITY
BEFORE INSERT ON RESERVATIONS
FOR EACH ROW
BEGIN
DECLARE N INTEGER;
SELECT COUNT(*) INTO N FROM ROOMS RO
  WHERE RO.HOTEL_ID=NEW.HOTEL_ID AND RO.ROOMTYPE_ID=NEW.ROOMTYPE_ID
  AND RO.ID NOT IN (
    SELECT DISTINCT OC.ROOM_ID FROM RESERVATIONS RE
    LEFT JOIN OCCUPATIONS OC ON RE.ID = OC.RESERVATION_ID
    WHERE (NOT RE.IS_ARCHIVED OR NOT RE.IS_CANCELLED) 
    AND DATE(arrival_date) >= RE.ARRIVAL_DATE AND DATE(exit_date) <= RE.EXIT_DATE);
IF (N < NEW.ROOM_COUNT) THEN SIGNAL SQLSTATE '20000' SET MESSAGE_TEXT = 'NO_ROOM_AVAILABLE';
END IF;
END;
$$